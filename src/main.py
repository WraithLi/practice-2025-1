import json
import random
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
with open("characters.json", "r", encoding="utf-8") as f:
    CHARACTERS = json.load(f)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
class GameState(StatesGroup):
    playing = State()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
user_stats = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üé≠ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã '–ö—Ç–æ —è?'\n\n"
        "–Ø –∑–∞–≥–∞–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –∞ —Ç—ã –¥–æ–ª–∂–µ–Ω —É–≥–∞–¥–∞—Ç—å –µ–≥–æ, –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã, "
        "–Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å '–î–∞', '–ù–µ—Ç' –∏–ª–∏ '–ù–µ –∑–Ω–∞—é'.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "- –¢—ã —á–µ–ª–æ–≤–µ–∫?\n"
        "- –¢—ã –∏–∑ —Ñ–∏–ª—å–º–∞?\n"
        "- –¢—ã —Å—É—â–µ—Å—Ç–≤—É–µ—à—å –≤ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏?\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É, –Ω–∞–ø–∏—à–∏ /play"
    )


# –ö–æ–º–∞–Ω–¥–∞ /play - –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
@dp.message(Command("play"))
async def play_game(message: types.Message, state: FSMContext):
    await state.set_state(GameState.playing)
    character = random.choice(CHARACTERS)
    await state.update_data(
        character=character,
        questions=0
    )
    await message.answer(
        f"üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –Ø –∑–∞–≥–∞–¥–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n"
        "–ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å '–î–∞', '–ù–µ—Ç' –∏–ª–∏ '–ù–µ –∑–Ω–∞—é'.\n\n"
        "–ß—Ç–æ–±—ã —Å–¥–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ /surrender"
    )

# –†–∞–±–æ—Ç–∞–µ—Ç –í–ù–ï –∏–≥—Ä—ã –∫–æ–º–∞–Ω–¥–∞ help
@dp.message(Command("help"), ~StateFilter(GameState.playing))
async def help_cmd(message: types.Message):
    await message.answer("–ü–æ–º–æ—â—å: /play - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É")



@dp.message(Command("hint"), StateFilter(GameState.playing))
async def hint_in_game(message: types.Message, state: FSMContext):
    data = await state.get_data()
    character = data["character"]

    # –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏–∫–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if character in ["–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫", "–¢–æ–Ω–∏ –°—Ç–∞—Ä–∫", "–î—Ä–∞–∫—É–ª–∞", "–®—Ä–µ–∫", "–ì–µ—Ä–∞–ª—å—Ç",
                                       "–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å", "–ö–æ—Ç –≤ —Å–∞–ø–æ–≥–∞—Ö", "–õ–µ–æ–Ω –ö–µ–Ω–Ω–µ–¥–∏",
                                       "–ö–∞–ø–∏—Ç–∞–Ω –î–∂–µ–∫ –í–æ—Ä–æ–±–µ–π", "–ì—É–±–∫–∞ –ë–æ–± –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –®—Ç–∞–Ω—ã",
                                       "–ö–∞—Ä–ª—Å–æ–Ω", "–î–∂–æ–∫–µ—Ä"]:
        hint = "–ü–µ—Ä—Å–æ–Ω–∞–∂ ‚Äî –º—É–∂—á–∏–Ω–∞"
    elif character in ["–†–∞–ø—É–Ω—Ü–µ–ª—å", "–î–∂—É–ª—å–µ—Ç—Ç–∞"]:
        hint = "–ü–µ—Ä—Å–æ–Ω–∞–∂ ‚Äî –¥–µ–≤—É—à–∫–∞"
    else:
        hint = "–ü–µ—Ä—Å–æ–Ω–∞–∂ ‚Äî –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª–∞"

    await message.answer(f"üîç –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}")

# –°–¥–∞—Ç—å—Å—è
@dp.message(Command("surrender"), StateFilter(GameState.playing))
async def surrender(message: types.Message, state: FSMContext):
    if await state.get_state() != GameState.playing.state:
        return await message.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞—Ç–∞. –ù–∞–ø–∏—à–∏ /play")

    data = await state.get_data()
    await message.answer(f"üòî –¢—ã —Å–¥–∞–ª—Å—è... –≠—Ç–æ –±—ã–ª {data['character']}.\n–ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â—ë —Ä–∞–∑? /play")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
@dp.message(GameState.playing)
async def handle_question(message: types.Message, state: FSMContext):
    data = await state.get_data()
    character = data["character"]
    questions = data["questions"] + 1
    question = message.text.lower()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
    if question.startswith("/"):
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤
    await state.update_data(questions=questions)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–≥–∞–¥–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if character.lower() in question:
        user_id = message.from_user.id
        user_stats[user_id] = user_stats.get(user_id, 0) + 1
        await message.answer(
            f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –≠—Ç–æ {character}!\n"
            f"–¢—ã —É–≥–∞–¥–∞–ª –∑–∞ {questions} –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
            f"–í—Å–µ–≥–æ –ø–æ–±–µ–¥: {user_stats[user_id]}\n"
            f"–°—ã–≥—Ä–∞–µ–º –µ—â—ë? /play"
        )
        await state.clear()
        return

    # –õ–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ —É–≥–∞–¥–∞–Ω)
    answer = "–ù–µ –∑–Ω–∞—é"

    if "—á–µ–ª–æ–≤–µ–∫" in question:
        answer = "–î–∞" if character in ["–õ–µ–æ–Ω –ö–µ–Ω–Ω–µ–¥–∏", "–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å", "–î–∂—É–ª—å–µ—Ç—Ç–∞", "–¢–æ–Ω–∏ –°—Ç–∞—Ä–∫", "–ö–∞—Ä–ª—Å–æ–Ω",
                                       "–ö–∞–ø–∏—Ç–∞–Ω –î–∂–µ–∫ –í–æ—Ä–æ–±–µ–π", "–î–∂–æ–∫–µ—Ä", "–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫", "–ì–µ—Ä–∞–ª—å—Ç", "–†–∞–ø—É–Ω—Ü–µ–ª—å"] \
            else "–ù–µ—Ç"
    elif "–∂–∏–≤–æ—Ç–Ω–æ–µ" in question or "–∑–≤–µ—Ä—å" in question or "–∫–æ—Ç" in question:
        answer = "–î–∞" if character in ["–ö–æ—Ç –≤ —Å–∞–ø–æ–≥–∞—Ö"] else "–ù–µ—Ç"
    elif "–º—É–ª—å—Ç" in question or "–º—É–ª—å—Ç–∏–∫" in question:
        answer = "–î–∞" if character in ["–ì—É–±–∫–∞ –ë–æ–± –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –®—Ç–∞–Ω—ã", "–®—Ä–µ–∫", "–†–∞–ø—É–Ω—Ü–µ–ª—å",
                                       "–ö–æ—Ç –≤ —Å–∞–ø–æ–≥–∞—Ö", "–ö–∞—Ä–ª—Å–æ–Ω"] else "–ù–µ—Ç"
    elif "–∏–≥—Ä" in question:
        answer = "–î–∞" if character in ["–õ–µ–æ–Ω –ö–µ–Ω–Ω–µ–¥–∏", "–ì–µ—Ä–∞–ª—å—Ç"] else "–ù–µ—Ç"
    elif "–∫–∏–Ω–æ" in question or "—Ñ–∏–ª—å–º" in question:
        answer = "–î–∞" if character in ["–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫", "–¢–æ–Ω–∏ –°—Ç–∞—Ä–∫", "–ö–∞–ø–∏—Ç–∞–Ω –î–∂–µ–∫ –í–æ—Ä–æ–±–µ–π", "–®—Ä–µ–∫",
                                       "–î–∂–æ–∫–µ—Ä", "–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å"] else "–ù–µ—Ç"
    elif "–∫–Ω–∏–≥" in question or "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä" in question:
        answer = "–î–∞" if character in ["–ì–µ—Ä–∞–ª—å—Ç", "–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å", "–î–∂—É–ª—å–µ—Ç—Ç–∞", "–î—Ä–∞–∫—É–ª–∞"] else "–ù–µ—Ç"
    elif "—Ä–µ–∞–ª—å–Ω" in question or "—Å—É—â–µ—Å—Ç–≤" in question:
        answer = "–î–∞" if character in ["–î—Ä–∞–∫—É–ª–∞"] else "–ù–µ—Ç"
    elif "—Å—É–ø–µ—Ä–≥–µ—Ä–æ–π" in question or "—Å—É–ø–µ—Ä-–≥–µ—Ä–æ–π" in question:
        answer = "–î–∞" if character in ["–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫", "–¢–æ–Ω–∏ –°—Ç–∞—Ä–∫"] else "–ù–µ—Ç"
    elif "–º–æ–Ω—Å—Ç—Ä" in question or "—á—É–¥–æ–≤–∏—â" in question:
        answer = "–î–∞" if character in ["–î—Ä–∞–∫—É–ª–∞", "–®—Ä–µ–∫"] else "–ù–µ—Ç"
    elif "–ø–∏—Ä–∞—Ç" in question:
        answer = "–î–∞" if character == "–ö–∞–ø–∏—Ç–∞–Ω –î–∂–µ–∫ –í–æ—Ä–æ–±–µ–π" else "–ù–µ—Ç"
    elif "–≤–µ–¥—å–º–∞–∫" in question:
        answer = "–î–∞" if character == "–ì–µ—Ä–∞–ª—å—Ç" else "–ù–µ—Ç"
    elif "–º—É–∂—á–∏–Ω–∞" in question or "–º—É–∂—Å–∫" in question:
        answer = "–î–∞" if character in ["–ß–µ–ª–æ–≤–µ–∫-–ø–∞—É–∫", "–¢–æ–Ω–∏ –°—Ç–∞—Ä–∫", "–î—Ä–∞–∫—É–ª–∞", "–®—Ä–µ–∫", "–ì–µ—Ä–∞–ª—å—Ç",
                                       "–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å", "–ö–æ—Ç –≤ —Å–∞–ø–æ–≥–∞—Ö", "–õ–µ–æ–Ω –ö–µ–Ω–Ω–µ–¥–∏",
                                       "–ö–∞–ø–∏—Ç–∞–Ω –î–∂–µ–∫ –í–æ—Ä–æ–±–µ–π", "–ì—É–±–∫–∞ –ë–æ–± –ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –®—Ç–∞–Ω—ã",
                                       "–ö–∞—Ä–ª—Å–æ–Ω", "–î–∂–æ–∫–µ—Ä"] else "–ù–µ—Ç"
    elif "–∂–µ–Ω—â" in question or "–∂–µ–Ω—Å–∫" in question or "–¥–µ–≤" in question:
        answer = "–î–∞" if character in ["–†–∞–ø—É–Ω—Ü–µ–ª—å", "–î–∂—É–ª—å–µ—Ç—Ç–∞"] else "–ù–µ—Ç"
    elif "–ø—Ä–∏–Ω—Ü" in question:
        answer = "–î–∞" if character == "–†–∞–ø—É–Ω—Ü–µ–ª—å" else "–ù–µ—Ç"
    elif "–ª–µ—Ç–∞—Ç—å" in question or "–ª–µ—Ç–∞–µ—Ç" in question:
        answer = "–î–∞" if character == "–ö–∞—Ä–ª—Å–æ–Ω" else "–ù–µ—Ç"

    await message.answer(answer)


# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message(Command("stats"))
async def show_stats(message: types.Message):
    wins = user_stats.get(message.from_user.id, 0)
    await message.answer(f"üèÜ –¢–≤–æ—ë –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥: {wins}")



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    dp.run_polling(bot, skip_updates=True)
